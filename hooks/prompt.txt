check mo yung mga nakalagay jan ayaw ko ng mga fake demo.
 gusto ko totoo na yung nakalagay sa web app ko tapos dapat may ai, image recognition na mag rerecommend ng mga similar image based dun sa image na na send ng isang user bali example:
(kunwari nawala yung wallet ko na brown tapos pinicturan ko tapos may nakahanap tapos pinicturan niya din  tapos nag match yung item niya sa nawawala kong gamit bigla nalng ito mag s-suggest dapat kahit detailes kung kunwari same na sinabi ko na brown wallet tapos sinabi din ng nakahanap na may nakuha siyang brown na wallet mag s-suggest din yun)
 gusto ko rin may ai ako na pwedeng pag tanungan ng mga user like kunwari di nila alam mag sign up or sign in or how to report and so on tapos maglagay ka din ng settings,sidebar, and navbar
 basta ayaw kona ng demo/fake web app dapat kahit yung charts ko totoo din tapos yung sign up/in ko dapat gumagana nayun tapos kusa itong papasok sa database ko lahat ng info tapos yung tapos yung admin dashboard ko 
dapat maganda na din kumpleto na may charts din dapat para mas madaling makita ni admin yung mga nangyayari sa web app tapos yung mga pag insert repot lost, found, person, and  pet dagdagan mo yung mga
 information na i f-filled nila para mas detail yung makita ng mga user or tao dun sa detail para kung sakaling makita nila ito mas malinaw sakanila kung ano yung nawawala or kung ano yung nahanap 



**Next Steps & Considerations:**

- **Database & Backend**: This is a frontend-only prototype. A real application would require a robust backend (e.g., Node.js with Express, Python with Django/Flask) and a SQL database (e.g., PostgreSQL, MySQL) to store users, reports, images, etc.
- **Authentication**: Implement user authentication (e.g., NextAuth.js).
- **AI/ML Integration**:

- The "AI recommendations" are currently simulated. Real implementation would involve:

- An image upload service (e.g., Vercel Blob, Cloudinary).
- An image recognition model (e.g., using TensorFlow.js, or a cloud AI service like Google Vision AI, AWS Rekognition).
- A backend service to process images, extract features, and compare them against existing reports in the database. This would likely be a Python service.






- **Real-time Features**: For notifications and messaging, consider WebSockets (e.g., Socket.IO).
- **API Routes**: Develop Next.js API routes or a separate backend API for all data operations.
- **Error Handling & Validation**: Add comprehensive form validation (client and server-side) and error handling.
- **Accessibility**: Ensure all components are accessible.
- **Performance Optimization**: Image optimization, code splitting, lazy loading.
- **Security**: Protect against common web vulnerabilities (XSS, CSRF, SQL injection).


This is a substantial project. The provided code gives a strong foundation for the frontend and UI/UX.

<FinalSteps>`<Step>`Download the code and install dependencies (`npm install`).`</Step>`
`<Step>`Set up a backend and database to replace the mock data and implement actual functionality.`</Step>`
`<Step>`Integrate an authentication solution like NextAuth.js.`</Step>`
`<Step>`Develop the AI/ML image recognition and matching features, likely with a Python backend service.`</Step>`
`<Step>`Implement API routes for all CRUD operations.`</Step>`

</FinalSteps>



gawin mo lahat ng ito tingnan mo din kung okay ba yung supabase as database dito  kung hindi, gamit ka ng iba na mas okay at mas madali magandang gamitin

# Prompt for Web App Development
# Web App Requirements
# - A web application for reporting lost and found items, people, and pets.
# - Features include user authentication, item reporting, AI recommendations, and an admin dashboard.
# - The app should have a modern UI with a sidebar, navbar, and settings.
# - The app should use real data and not just demo data.
# - The app should be responsive.\
# - The app should include image recognition to suggest similar items based on user-uploaded images.
# - The app should have a user-friendly interface for reporting lost/found items, people, and pets.
# - The app should have an AI assistant for user queries.
# - The app should have a detailed admin dashboard with charts and real-time data.
# - The app should allow users to sign up, sign in, and report lost/found items.
# - The app should store all information in a database.
# - The app should have a clean and modern design.
# - The app should be built using Next.js, React, and Tailwind CSS.
# - The app should be built with a focus on user experience and accessibility.
# - The app should be built with a focus on performance and security.
# - The app should be built with a focus on scalability and maintainability.
# - The app should be built with a focus on real-time updates and notifications.
# - The app should be built with a focus on AI and machine learning integration.
# - The app should be built with a focus on image recognition and matching.
# - The app should be built with a focus on user data privacy and security.
# - The app should be built with a focus on user authentication and authorization.
# - The app should be built with a focus on user data management and reporting.
# - The app should be built with a focus on user feedback and improvement.
# - The app should be built with a focus on user engagement and retention.
# - The app should be built with a focus on user education and support.
# - The app should be built with a focus on user analytics and insights.
sa admin kailangan advanced din ito may mga magagandang features din na need ng admin tulad ng pag manage ng mga users, reports, at mga settings ng app. Dapat din may mga charts na nagpapakita ng statistics ng mga reports at user engagement.
# - The app should have a robust admin panel for managing users, reports, and app settings.
# - The app should have a user-friendly interface for admins to manage the application.
# - The app should have a modern and responsive design for both users and admins.
# - The app should be built with a focus on user experience and accessibility.
